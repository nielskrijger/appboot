package context_test

import (
	"testing"

	"github.com/nielskrijger/goboot/context"
	"github.com/nielskrijger/goboot/utils"
	"github.com/rs/zerolog"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// AppService is an autogenerated mock type for the AppService type.
type appServiceMock struct {
	mock.Mock
}

func (m *appServiceMock) Close() {
	m.Called()
}

func (m *appServiceMock) Configure(ctx *context.AppContext) {
	m.Called(ctx)
}

func (m *appServiceMock) Init() {
	m.Called()
}

func TestAppContext_Logger(t *testing.T) {
	ctx := context.NewAppContext("../test/conf", "test")
	testLogger := &utils.TestLogger{}
	ctx.Log = zerolog.New(testLogger)

	ctx.Configure()

	entries := testLogger.Lines()
	assert.Len(t, entries, 2)
	assert.Equal(t, "starting app services configuration", entries[0]["message"])
	assert.Equal(t, "info", entries[1]["level"])
	assert.Equal(t, "finished app services configuration", entries[1]["message"])
	assert.Equal(t, "info", entries[1]["level"])
}

func TestAppContext_Configure(t *testing.T) {
	serviceMock1 := &appServiceMock{}
	serviceMock2 := &appServiceMock{}

	ctx := context.NewAppContext("../test/conf", "postgres")
	serviceMock1.On("Configure", ctx).Return()
	serviceMock2.On("Configure", ctx).Return()

	ctx.AddService(serviceMock1)
	ctx.AddService(serviceMock2)

	ctx.Configure()

	serviceMock1.AssertExpectations(t)
	serviceMock2.AssertExpectations(t)
}

func TestAppContext_Init(t *testing.T) {
	serviceMock1 := &appServiceMock{}
	serviceMock1.On("Init").Return()

	serviceMock2 := &appServiceMock{}
	serviceMock2.On("Init").Return()

	ctx := context.NewAppContext("../test/conf", "postgres")

	ctx.AddService(serviceMock1)
	ctx.AddService(serviceMock2)

	ctx.Init()

	serviceMock1.AssertExpectations(t)
	serviceMock2.AssertExpectations(t)
}

func TestAppContext_Close(t *testing.T) {
	serviceMock1 := &appServiceMock{}
	serviceMock1.On("Close").Return()

	serviceMock2 := &appServiceMock{}
	serviceMock2.On("Close").Return()

	ctx := context.NewAppContext("../test/conf", "postgres")
	ctx.AddService(serviceMock1)
	ctx.AddService(serviceMock2)

	ctx.Close()

	serviceMock1.AssertExpectations(t)
	serviceMock2.AssertExpectations(t)
}
